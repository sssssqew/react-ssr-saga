{"version":3,"file":"static/js/pages-UsersPage.04e82e42.chunk.js","mappings":"mMAiBA,EAfc,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACf,OAAIA,GAEF,0BACE,wBACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,yBACE,SAAC,KAAD,CAAMC,GAAE,iBAAYD,EAAKE,IAAzB,SAAgCF,EAAKG,YAD9BH,EAAKE,WALJ,M,oBCCdE,GAAiBC,EAAAA,EAAAA,eAAc,MAIxBC,EAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpBC,GAAiBC,EAAAA,EAAAA,YAAWL,GAClC,OAAII,GACDA,EAAeE,MAElBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,MAFd,MADJ,MCU7B,GAAeO,EAAAA,EAAAA,KACb,SAAAC,GAAK,MAAK,CACRjB,MAAOiB,EAAMjB,MAAMA,SAErB,CACEkB,SAAAA,EAAAA,IALJ,EAduB,SAAC,GAAyB,IAAvBlB,EAAsB,EAAtBA,MAAOkB,EAAe,EAAfA,SAM/B,OAJAC,EAAAA,EAAAA,YAAU,WACLnB,GACHkB,MACC,CAACA,EAAUlB,KAEZ,iCACE,SAAC,EAAD,CAAOA,MAAOA,IADhB,KAEE,SAACQ,EAAD,CAAWC,QAASS,IAFtB,UCHJ,EAVa,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACNkB,EAA0BlB,EAA1BkB,MAAOC,EAAmBnB,EAAnBmB,KAAMhB,EAAaH,EAAbG,SACrB,OACE,4BACE,0BAAKA,EAAL,KAAiBgB,EAAjB,QACA,0BAAG,mCAAH,IAAmBD,SCmBzB,EAlBsB,SAAC,GAAY,IAAVhB,EAAS,EAATA,GACjBF,GAAOoB,EAAAA,EAAAA,KAAY,SAAAL,GAAK,OAAIA,EAAMjB,MAAME,QACxCqB,GAAWC,EAAAA,EAAAA,MAUjB,OHA0B,SAAAf,GAC1B,IAAMC,GAAiBC,EAAAA,EAAAA,YAAWL,GAC9BI,IACDA,EAAeE,MAClBF,EAAeG,SAASC,KAAKC,QAAQN,QAAQA,OGZ7CgB,EAAa,kBAAMF,GAASG,EAAAA,EAAAA,IAAQtB,QAGpCe,EAAAA,EAAAA,YAAU,WACLjB,GAAQA,EAAKE,KAAOuB,SAASvB,EAAI,KACpCmB,GAASG,EAAAA,EAAAA,IAAQtB,MAChB,CAACmB,EAAUnB,EAAIF,IAEdA,GAGG,SAAC,EAAD,CAAMA,KAAMA,IAFV,M,UCLX,EAVkB,WAChB,OACE,iCACE,SAAC,EAAD,KACA,SAAC,KAAD,CAAO0B,KAAK,aACNC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,SAAC,EAAD,CAAe1B,GAAI0B,EAAMC,OAAO3B","sources":["components/Users.js","lib/PreloadContext.js","containers/UsersContainer.js","components/User.js","containers/UserContainer.js","pages/UsersPage.js"],"sourcesContent":["import { Link } from 'react-router-dom'\n\nconst Users = ({ users }) => {\n  if(!users) return null // 데이터 유효성 검증\n  return (\n    <div>\n      <ul>\n        {users.map(user => (\n          <li key={user.id}>\n            <Link to={`/users/${user.id}`}>{user.username}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Users ","import { createContext, useContext } from \"react\";\n\n// 클라이언트 환경: null\n// 서버 환경 : { done: false, promises: [] }\nconst PreloadContext = createContext(null)\nexport default PreloadContext\n\n// preloadContext : { done, promises }\nexport const Preloader = ({ resolve }) => { // resolve: getUsers 함수\n  const preloadContext = useContext(PreloadContext)\n  if(!preloadContext) return null\n  if(preloadContext.done) return null // 이미 작업이 끝난 경우\n\n  preloadContext.promises.push(Promise.resolve(resolve())) // API서버 호출 이후에 해당 프로미스를 추가함\n  return null \n}\n\n// Hook 형태로 사용되는 API서버 호출 함수\nexport const usePreloader = resolve => {\n  const preloadContext = useContext(PreloadContext)\n  if(!preloadContext) return null\n  if(preloadContext.done) return null // 이미 작업이 끝난 경우\n  preloadContext.promises.push(Promise.resolve(resolve()))\n}","import { useEffect } from \"react\";\nimport Users from \"../components/Users\";\nimport { connect } from \"react-redux\";\nimport { getUsers } from \"../modules/users\";\nimport { Preloader } from \"../lib/PreloadContext\";\n\nconst UsersContainer = ({ users, getUsers }) => {\n  // 서버사이드 렌더링의 경우 useEffect 가 실행되지 않기 때문에 Preloader 컴포넌트를 이용하여 API서버를 호출함\n  useEffect(() => {\n    if(users) return // 이미 서버에서 데이터를 받아와서 값이 있으면 다시 서버에 요청하지 않음 \n    getUsers()\n  }, [getUsers, users])\n  return (\n    <>\n      <Users users={users}/> {/* 리렌더링시 API서버에서 가져온 users 데이터를 이용하여 렌더링함 */}\n      <Preloader resolve={getUsers}/> {/* API서버 호출 (초기 렌더링시 한번만 실행됨, 리렌더링시에는 실행되지 않음)  */}\n    </>\n  )\n}\n\nexport default connect(\n  state => ({\n    users: state.users.users \n  }),\n  {\n    getUsers\n  }\n)(UsersContainer)","const User = ({ user }) => {\n  const { email, name, username } = user \n  return (\n    <div>\n      <h1>{username} ({name})</h1>\n      <p><b>e-mail:</b> {email}</p>\n    </div>\n  );\n};\n\nexport default User;","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport User from '../components/User'\nimport { usePreloader } from \"../lib/PreloadContext\";\nimport { getUser } from '../modules/users'\n\nconst UserContainer = ({ id }) => { // id : 사용자가 요청한 id (조회하려는 사용자 ID 값)\n  const user = useSelector(state => state.users.user) // 현재 스토어 상태 조회\n  const dispatch = useDispatch() // dispatch 함수 반환하는 리액트 훅\n\n  usePreloader(() => dispatch(getUser(id))) // 서버사이드렌더링을 위한 API서버 호출 (커스텀훅 사용)\n  \n  // 클라이언트사이드렌더링에는 useEffect 훅에서 API서버 호출함\n  useEffect(() => {\n    if(user && user.id === parseInt(id, 10)) return // 사용자가 이미 존재하고, 요청한 id 값이 현재 사용자 ID 와 일치하면 서버에 재요청할 필요가 없음\n    dispatch(getUser(id)) // API서버 호출\n  }, [dispatch, id, user]) // id 가 바뀔때마다 새로 요청해야 함 \n\n  if(!user){ // null 을 반환하는 대신 서버사이드렌더링을 위하여 Preloader 컴포넌트로 API서버를 호출함\n    return null // 이미 usePreloader 로 API서버 호출해서 스토어의 user 상태를 변경하고 UserContainer 컴포넌트를 리렌더링하기 때문에 렌더링할때 user 는 무조건 존재함\n  }\n  return <User user={user}/>\n}\n\nexport default UserContainer","import UsersContainer from \"../containers/UsersContainer\";\nimport UserContainer from \"../containers/UserContainer\";\nimport { Route } from 'react-router-dom'\n\nconst UsersPage = () => {\n  return (\n    <>\n      <UsersContainer/>\n      <Route path='/users/:id' \n            render={({ match }) => <UserContainer id={match.params.id}/>}/>\n    </>\n  )\n}\n\nexport default UsersPage"],"names":["users","map","user","to","id","username","PreloadContext","createContext","Preloader","resolve","preloadContext","useContext","done","promises","push","Promise","connect","state","getUsers","useEffect","email","name","useSelector","dispatch","useDispatch","usePreloader","getUser","parseInt","path","render","match","params"],"sourceRoot":""}